<?xml version="1.0"?>

<!--
description:

"Introduction"

copyright: "Copyright (c) 2004-2005, Andreas Leitner and others"
license: "Eiffel Forum License v2 (see forum.txt)"
date: "$Date$"
revision: "$Revision$"

-->

<chapter xmlns="http://www.gobosoft.com/eiffel/gobo/documentation" id="ewg/introduction">

  <chapterinfo>
    <copyright>
      <year>2004-2005</year>
      <holder>Andreas Leitner</holder>
    </copyright>
    <author>
      <firstname>Andreas</firstname><surname>Leitner</surname>
    </author>
    <email>aleitner@raboof.at</email>
    <date>8 March 2005</date>
  </chapterinfo>

  <title>Introduction to the Eiffel Wrapper Generator</title>
  <section>
    
    <title>What is EWG?</title>

    <para>
      <mediaobjectco>
	 <imageobjectco>
	   <imageobject>
	     <imagedata align="center" fileref="image/ewg_logo_medium.png"></imagedata>
	   </imageobject>
	 </imageobjectco>
      </mediaobjectco>
    </para>

    <para>
      EWG (Eiffel Wrapper Generator) is a tool that generates Eiffel wrapper classes for C libraries.
      It can be used to create libraries that bridge the gap between Eiffel and C. 
      It aims to work for arbitrary ANSI C and with all common Eiffel compilers.
    </para>

    <para>
      EWG is ideal for creating cross-platform, cross-eiffel-compiler and cross-c-compiler C 
      library wrappers.
    </para>

    <para>
      If you have questions that are not covered in this document, please email me at
      <ulink url="mailto:aleitner@raboof.at">aleitner@raboof.at</ulink>.
    </para>

  </section>

    <delete file="${EWG}/doc/introduction.html"/>
    <delete file="${EWG}/doc/installation.html"/>
    <delete file="${EWG}/doc/building_the_tools.html"/>
    <delete file="${EWG}/doc/using_the_examples.html"/>
    <delete file="${EWG}/doc/understanding_ewg.html"/>
    <delete file="${EWG}/doc/how_to_create_a_wrapper.html"/>
    <delete file="${EWG}/doc/appendix.html"/>
  <section>
    <title>Diving into Ewg</title>
    <para>
      <link linkend="installation">Installation</link>
    </para>
    <para>
      <link linkend="building_the_tools">Building the tools</link>
    </para>
    <para>
      <link linkend="using_the_examples">Using the examples</link>
    </para>
    <para>
      <link linkend="how_to_create_a_wrapper">How to create your own wrapper</link>
    </para>
    <para>
      <link linkend="appendix">Appendix</link>
    </para>
  </section>

  <section>
    <title>Current Features</title>
    <itemizedlist>
      <listitem>
	 <para>
	   Parses pretty much all  <emphasis>ANSI C</emphasis>, but also understands
	 <emphasis>gcc</emphasis> and  <emphasis>Visual C </emphasis> extensions</para>
	 <para>
	   Generates wrappers for:
	   <itemizedlist>
	     <listitem><para><emphasis>Structs</emphasis></para></listitem>
	     <listitem><para><emphasis>Enums</emphasis></para></listitem>
	     <listitem><para><emphasis>Functions</emphasis></para></listitem>
	     <listitem><para><emphasis>Callbacks</emphasis></para></listitem>
	   </itemizedlist>
	 </para>
      </listitem>
      <listitem>
	 <para>
	   Works on <emphasis>Linux</emphasis>, <emphasis>Windows</emphasis> and <emphasis>Mac OS X</emphasis>(code is very easily portable to new platforms)
	 </para>
      </listitem>
      <listitem>
	 <para>
	   Works with <emphasis>SmartEiffel</emphasis>, <emphasis>ISE Eiffel</emphasis> and 
	   <emphasis>Visual Eiffel</emphasis>
	 </para>
      </listitem>
      <listitem>
	 <para>
	   Includes framework to automate building libraries and applications that use EWG
	 </para>
      </listitem>
      <listitem>
	 <para>
	   EWG comes with real life examples:
	 </para>
	 <itemizedlist>
	   <listitem><para><emphasis>GTK 2</emphasis></para></listitem>
	   <listitem><para><emphasis>SDL</emphasis></para></listitem>
	   <listitem><para><emphasis>OpenGL</emphasis></para></listitem>
	   <listitem><para><emphasis>Berkeley DB</emphasis></para></listitem>
	 </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>
      The GTK 2 example is actually on the edge of becoming usable for application developers.
    </para>
  </section>

  
  <section>
    <title>Planned Features</title>
    <itemizedlist>
      <listitem>
	 <para>
	   Support for macros
	 </para>
      </listitem>
      <listitem>
	 <para>
	   Make mappings configurable (Names, Types, Contracts, ...)
	 </para>
      </listitem>
      <listitem>
	 <para>
	   Make EWG easier to use
	 </para>
      </listitem>
      <listitem>
	 <para>
	   Integrate with ePosix
	 </para>
      </listitem>
    </itemizedlist>
  </section>

</chapter>