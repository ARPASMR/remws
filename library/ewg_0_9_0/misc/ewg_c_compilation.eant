<?xml version="1.0"?>

<project name="ewg_c_compilation" default="help">

  <description>
    description: "targets for C preprocessing, compiling and building libraries"
    copyright: "Copyright (c) 2004, Andreas Leitner and others"
    license: "Eiffel Forum License v2 (see forum.txt)"
    date: "$Date: 2004/06/28 23:49:34 $"
    revision: "$Revision: 1.42 $"
  </description>

  <target name="help">
    <echo message="usage:"/>

    <echo message="   geant c_preprocess"/>
    <echo message="   geant c_preprocess_se"/>
    <echo message="   geant c_preprocess_ise"/>
    <echo message="   geant c_preprocess_ve"/>
    <echo message="   geant c_compile"/>
    <echo message="   geant c_compile_se"/>
    <echo message="   geant c_compile_ise"/>
    <echo message="   geant c_compile_ve"/>
    <echo message="   geant c_build_library"/>
    <echo message="   geant c_build_library_all"/>
    <echo message="   geant c_build_library_se"/>
    <echo message="   geant c_build_library_ise"/>
    <echo message="   geant c_build_library_ve"/>
    <echo message=""/>
    <echo message="$${GOBO_EIFFEL} ... Eiffel Compiler (se|ise|ve)"/>
    <echo message="$${GOBO_CC}     ... C Compiler (gcc|bcb|msc|lcc)"/>
  </target>

  <target name="c_preprocess" depend="init">
    <description>
      C Preprocess ${ewg.full_header_file_name}.
      (Using options from ${ewg.c_compile_options.default} and ${ewg.c_compile_options})
      The preprocessed code will be stored as file ${ewg.cpp_header_name}.
    </description>
    <geant target="c_preprocess_${cc}"/>
  </target>

  <target name="c_preprocess_gcc" depend="init">
    <description>
      C Preprocess ${ewg.full_header_file_name}.
      (Using options from ${ewg.c_compile_options.default} and ${ewg.c_compile.options})
      The preprocessed code will be stored as file ${ewg.cpp_header_name}.
    </description>
    <geant target="set_default_options"/>
    <exec executable="gcc -E ${ewg.c_compile.options.default} ${ewg.c_compile.options} ${ewg.full_header_name} &gt; ${ewg.cpp_header_name}"/>
  </target>

  <target name="c_preprocess_msc" depend="init">
    <description>
      C Preprocess ${ewg.full_header_file_name}.
      (Using options from ${ewg.c_compile.options.default} and ${ewg.c_compile.options})
      The preprocessed code will be stored as file ${ewg.cpp_header_name}.
    </description>
    <geant target="set_default_options"/>
    <exec executable="cl /nologo /E ${ewg.c_compile.options.default} ${ewg.c_compile.options} ${ewg.full_header_name} &gt; ${ewg.cpp_header_name}"/>
  </target>

  <target name="c_preprocess_bcb" depend="init">
    <description>
      C Preprocess ${ewg.full_header_file_name}.
      (Using options from ${ewg.c_compile_options.default} and ${ewg.c_compile_options})
      The preprocessed code will be stored as file ${ewg.cpp_header_name}.
    </description>
    <geant target="set_default_options"/>
    <exec executable="${bcb.cpp} -P- -o${ewg.cpp_header_name} ${ewg.c_compile.options.default} ${ewg.c_compile.options} ${ewg.full_header_name}" dir="${system_dir}"/>
  </target>

  <target name="c_compile_se" depend="init">
    <set name="eiffel" value="se"/>
    <geant target="c_compile"/>
  </target>

  <target name="c_compile_ise" depend="init">
    <set name="eiffel" value="ise"/>
    <geant target="c_compile"/>
  </target>

  <target name="c_compile_ve" depend="init">
    <set name="eiffel" value="ve"/>
    <geant target="c_compile"/>
  </target>

  <target name="c_compile" depend="init">
    <description>
      Compile C code.
      ${ewg.c_compile.dir_name} ... root directory of C files
      ${ewg.c_compile.options.default}  ... C compiler options
      ${ewg.c_compile.options})  ... C compiler options
    </description>
    <echo message="C compiling for ${eiffel} / ${cc}" if="${ewg.verbose}=--verbose"/>
    <geant target="c_compile_${cc}"/>
  </target>


  <target name="c_compile_gcc">
    <geant target="set_default_options"/>
    <exec executable="gcc ${ewg.c_compile.options.default} ${ewg.c_compile.options} -c ${fs.filename} -o ${fs.mapped_filename}">
      <fileset
	dir="${ewg.c_compile.dir_name}"
	filename_directory="${ewg.c_compile.dir_name}"
	mapped_filename_directory="${ewg.c_compile.dir_name}"
	include="@(*.c|spec/${eiffel}/*.c)">
	 <map type="glob" from="*.c" to="*${ewg.obj}"/>
      </fileset>
    </exec>
  </target>

  <target name="c_compile_msc">
    <geant target="set_default_options"/>
    <exec executable="cl /nologo ${ewg.c_compile.options.default} ${ewg.c_compile.options} /c /Fo${fs.mapped_filename} ${fs.filename}">
      <fileset
	 dir="${ewg.c_compile.dir_name}"
	 filename_directory="${ewg.c_compile.dir_name}"
	 mapped_filename_directory="${ewg.c_compile.dir_name}"
	 include="@(*.c|spec/${eiffel}/*.c)">
	 <map type="glob" from="*.c" to="*${ewg.obj}"/>
      </fileset>
    </exec>
  </target>

  <target name="c_compile_bcb">
    <geant target="set_default_options"/>
    <exec executable="${bcb.cc} -g0 ${ewg.c_compile.options.default} ${ewg.c_compile.options} -c -o${fs.mapped_filename} ${fs.filename}">
      <fileset
	 dir="${ewg.c_compile.dir_name}"
	 filename_directory="${ewg.c_compile.dir_name}"
	 mapped_filename_directory="${ewg.c_compile.dir_name}"
	 include="@(*.c|spec/${eiffel}/*.c)">
	 <map type="glob" from="*.c" to="*${ewg.obj}"/>
      </fileset>
    </exec>
  </target>

  <target name="c_build_library_all">
    <geant target="c_build_library_se"/>
    <geant target="c_build_library_ise"/>
    <geant target="c_build_library_ve"/>
  </target>

  <target name="c_build_library_se" depend="init">
    <set name="eiffel" value="se"/>
    <geant target="c_build_library"/>
  </target>

  <target name="c_build_library_ise" depend="init">
    <set name="eiffel" value="ise"/>
    <geant target="c_build_library"/>
  </target>

  <target name="c_build_library_ve" depend="init">
    <set name="eiffel" value="ve"/>
    <geant target="c_build_library"/>
  </target>

  <target name="c_build_library" depend="init">
    <description>
      Put generated Code in an archive.
      ${ewg.c_build_library.dir_name} ... root directory of object files
      ${ewg.c_build_library.lib_name} ... library name
    </description>
    <geant target="c_build_library_${cc}"/>
  </target>

  <target name="c_build_library_gcc">
    <geant target="c_compile"/>
    <exec executable="ar rcs ${ewg.c_build_library.lib_name}_${eiffel}_${cc}${ewg.lib} ${fs.filename}">
      <fileset
	 dir="${ewg.c_build_library.dir_name}"
	 filename_directory="${ewg.c_build_library.dir_name}"
	 mapped_filename_directory="${ewg.c_build_library.dir_name}"
	 include="@(*${ewg.obj}|spec/${eiffel}/*${ewg.obj})"/>
    </exec>
  </target>

  <target name="c_build_library_msc">
    <geant target="c_compile"/>
    <!-- Dirty hack: First create the lib, then add files to it -->
    <!-- TODO: find better solution -->
    <exec executable="lib /nologo /OUT:${ewg.c_build_library.lib_name}_${eiffel}_${cc}${ewg.lib} ${fs.filename}">
      <fileset
	 dir="${ewg.c_build_library.dir_name}"
	 filename_directory="${ewg.c_build_library.dir_name}"
	 mapped_filename_directory="${ewg.c_build_library.dir_name}"
	 include="@(*${ewg.obj}|spec/${eiffel}/*${ewg.obj})"/>
    </exec>
    <exec executable="lib /nologo ${ewg.c_build_library.lib_name}_${eiffel}_${cc}${ewg.lib} ${fs.filename}">
      <fileset
	 dir="${ewg.c_build_library.dir_name}"
	 filename_directory="${ewg.c_build_library.dir_name}"
	 mapped_filename_directory="${ewg.c_build_library.dir_name}"
	 include="@(*${ewg.obj}|spec/${eiffel}/*${ewg.obj})"/>
    </exec>
  </target>

  <target name="c_build_library_bcb">
    <geant target="c_compile"/>
    <!-- /P256 makes tlib use a bigger page size, it would barf otherwise at for example the opengl glue code -->
    <exec executable="${bcb.lib} /P256 ${ewg.c_build_library.lib_name}_${eiffel}_${cc}${ewg.lib} +${fs.filename}">
      <fileset
	 dir="${ewg.c_build_library.dir_name}"
	 filename_directory="${ewg.c_build_library.dir_name}"
	 mapped_filename_directory="${ewg.c_build_library.dir_name}"
	 include="@(*${ewg.obj}|spec/${eiffel}/*${ewg.obj})"/>
    </exec>
  </target>

  <!-- Implementation -->

  <target name="init">
    <set name="eiffel" value="se"/>
    <set name="ewg.c_compile.options" value=""/>
    <set name="ewg.c_link_options" value=""/>

    <geant target="init_eiffel"/>
    <geant target="init_cc"/>
    <geant target="init_os"/>
    <geant target="init_ewg"/>
  </target>

  <target name="init_ewg">
    <!--
    Values to be defined:
      ${ewg.c_preprocess.full_header_file_name}  ... Header file name to preprocess
      ${ewg.c_preprocess.cpp_header_name}        ... Filename of preprocessed header file
      ${ewg.c_compile.dir_name}                  ... Root directory of C files
      ${ewg.c_compile.options})                  ... C compiler options
      ${ewg.c_build_library.dir_name}            ... Root directory of object files
      ${ewg.c_build_library.lib_name}            ... Library name
    -->
  </target>

  <target name="init_eiffel" if="${GOBO_EIFFEL}">
    <set name="eiffel" value="${GOBO_EIFFEL}"/>
  </target>

  <target name="init_cc" if="${GOBO_CC}">
    <set name="cc" value="${GOBO_CC}"/>
  </target>

  <target name="init_os">
    <geant target="init_windows"/>
    <geant target="init_unix"/>
  </target>

  <target name="init_windows" if="${GOBO_OS}=windows">
    <set name="exe" value=".exe"/>
    <set name="ewg.obj" value=".obj"/>
    <set name="ewg.lib" value=".lib"/>

    <set name="bcb.cpp" value="&quot;${ISE_EIFFEL}\BCC55\bin\cpp32&quot;" if="${ISE_EIFFEL}"/>
    <set name="bcb.cc" value="&quot;${ISE_EIFFEL}\BCC55\bin\bcc32&quot;" if="${ISE_EIFFEL}"/>
    <set name="bcb.lib" value="&quot;${ISE_EIFFEL}\BCC55\bin\tlib&quot;" if="${ISE_EIFFEL}"/>
    <set name="bcb.cpp" value="cpp32" unless="${ISE_EIFFEL}"/>
    <set name="bcb.cc" value="bcc32" unless="${ISE_EIFFEL}"/>
    <set name="bcb.lib" value="tlib" unless="${ISE_EIFFEL}"/>

    <set name="cc" value="msc" unless="${cc}"/>
  </target>

  <target name="init_unix" unless="${GOBO_OS}=windows">
    <set name="exe" value=""/>
    <set name="ewg.obj" value=".o"/>
    <set name="ewg.lib" value=".a"/>
    <set name="cc" value="gcc" unless="${cc}"/>
    <available resource="/usr/include/crt_externs.h" variable="ewg.is_mac_os_x"/>
  </target>

  <target name="set_default_options">
    <set name="ewg.c_compile.options.default" value=""/>
    <geant target="set_default_options_windows"/>
    <geant target="set_default_options_unix"/>
  </target>

  <target name="set_default_options_windows" if="${GOBO_OS}=windows">
    <set name="ewg.c_compile.options.default" value="${ewg.c_compile.options.default} /I${VE_Bin}" if="${eiffel}=ve"/>
    <set name="ewg.c_compile.options.default" value="${ewg.c_compile.options.default} /I${ISE_EIFFEL}\studio\spec\windows\include" if="${eiffel}=ise"/>
  </target>

  <target name="set_default_options_unix" unless="${GOBO_OS}=windows">
    <set name="ewg.c_compile.options.default" value="${ewg.c_compile.options.default} -I${VE_Bin}" if="${eiffel}=ve"/>
    <set name="ewg.c_compile.options.default" value="${ewg.c_compile.options.default} -I${ISE_EIFFEL}/studio/spec/$ISE_PLATFORM/include" if="${eiffel}=ise"/>
  </target>

</project>
