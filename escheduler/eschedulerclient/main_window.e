note
	description: "Main window for this application"
	author: "Generated by the New Vision2 Application Wizard."
	date: "$Date: 2013/8/7 12:14:28 $"
	revision: "1.0.0"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			create_interface_objects,
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

create
	default_create

feature {NONE} -- Initialization

	create_interface_objects
			-- <Precursor>
		do
				-- Create main container.
			create main_container
				-- Create the menu bar.
			create standard_menu_bar
				-- Create file menu.
			create file_menu.make_with_text (Menu_file_item)
				-- Create the communication menu
			create communication_menu.make_with_text (Menu_communication_item)
				-- Create help menu.
			create help_menu.make_with_text (Menu_help_item)

				-- Create a toolbar.
			create standard_toolbar

				-- Create a status bar and a status label.
			create standard_status_bar
			create standard_status_label.make_with_text ("Add your status text here...")


			create db.login ("root", "")
			db.set_base

			create session_control.make
			session_control.connect

			if session_control.is_connected then
				io.put_string ("Now connected.")
				io.put_new_line

				create modification.make

				modification.modify ("use test;")
				session_control.commit

				modification.modify ("drop table test_table;")
				session_control.commit

				modification.modify ("create table test_table ( id integer not null auto_increment primary key )")
				session_control.commit

				session_control.disconnect
				if not session_control.is_connected then
					io.put_string ("Now not connected.")
					io.put_new_line
				end
			end





			create msg.make

			msg.set_type (msg.execute)
			msg.set_command ("ls")


		end

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

				-- Create and add the menu bar.
			build_standard_menu_bar
			set_menu_bar (standard_menu_bar)

				-- Create and add the toolbar.
			build_standard_toolbar
			upper_bar.extend (create {EV_HORIZONTAL_SEPARATOR})
			upper_bar.extend (standard_toolbar)

				-- Create and add the status bar.
			build_standard_status_bar
			lower_bar.extend (standard_status_bar)

			build_main_container
			extend (main_container)

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window.
			set_title (Window_title)

				-- Set the initial size of the window.
			set_size (Window_width, Window_height)
		end

	is_in_default_state: BOOLEAN
			-- Is the window in its default state?
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end


feature {NONE} -- Menu Implementation

	standard_menu_bar: EV_MENU_BAR
			-- Standard menu bar for this window.

	file_menu: EV_MENU
			-- "File" menu for this window (contains New, Open, Close, Exit...)

	communication_menu: EV_MENU
			-- "Communication menu for this window (Connect, Send message, Disconnect, ...)

	configuration_menu: EV_MENU
			-- "Configuration menu fr this window (Create database, Run script, ...)

	help_menu: EV_MENU
			-- "Help" menu for this window (contains About...)

	build_standard_menu_bar
			-- Create and populate `standard_menu_bar'.
		do
				-- Add the "File" menu.
			build_file_menu
			standard_menu_bar.extend (file_menu)
				-- Add the "Communication" menu.
			build_communication_menu
			standard_menu_bar.extend (communication_menu)
				-- Add the "Configuration" menu
			build_configuration_menu
			standard_menu_bar.extend (configuration_menu)
				-- Add the "Help" menu.
			build_help_menu
			standard_menu_bar.extend (help_menu)
		ensure
			menu_bar_initialized: not standard_menu_bar.is_empty
		end

	build_file_menu
			-- Create and populate `file_menu'.
		local
			menu_item: EV_MENU_ITEM
		do
			create menu_item.make_with_text (Menu_file_new_item)
				--| TODO: Add the action associated with "New" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_open_item)
				--| TODO: Add the action associated with "Open" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_save_item)
				--| TODO: Add the action associated with "Save" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_saveas_item)
				--| TODO: Add the action associated with "Save As..." here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_close_item)
				--| TODO: Add the action associated with "Close" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_close_item)
				--| TODO: Add the action associated with "Close" here.
			file_menu.extend (menu_item)

			file_menu.extend (create {EV_MENU_SEPARATOR})

				-- Create the File/Exit menu item and make it call
				-- `request_close_window' when it is selected.
			create menu_item.make_with_text (Menu_file_exit_item)
			menu_item.select_actions.extend (agent request_close_window)
			file_menu.extend (menu_item)
		ensure
			file_menu_initialized: not file_menu.is_empty
		end

	build_communication_menu
			-- Create and populate `communication_menu'.
		local
			menu_item: EV_MENU_ITEM
		do
			create menu_item.make_with_text (Menu_communication_connect_item)
				--| TODO: Add the action associated with "Connect" here.
			menu_item.select_actions.extend (agent request_connect)
			communication_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_communication_send_message_item)
				--| TODO: Add the action associated with "Send message" here.
			menu_item.select_actions.extend (agent send_message)
			communication_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_communication_disconnect_item)
				--| TODO: Add the action associated with "Disconnect" here.
			menu_item.select_actions.extend (agent request_disconnect)
			communication_menu.extend (menu_item)
		ensure
			communication_menu_initialized: not communication_menu.is_empty
		end

	build_configuration_menu
			-- Create and populate `configuration_menu'
		local
			menu_item: EV_MENU_ITEM
		do
			create menu_item.make_with_text (Menu_configuration_create_database_item)
				--| TODO: Add the action associated with "Connect" here.
			menu_item.select_actions.extend (agent request_create_db)
			communication_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_configuration_run_script_item)
				--| TODO: Add the action associated with "Send message" here.
			menu_item.select_actions.extend (agent request_run_script)
			communication_menu.extend (menu_item)
		ensure
			configuration_menu_initialized: not configuration_menu.is_empty
		end

	build_help_menu
			-- Create and populate `help_menu'.
		local
			menu_item: EV_MENU_ITEM
		do
			create menu_item.make_with_text (Menu_help_contents_item)
				--| TODO: Add the action associated with "Contents and Index" here.
			help_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_help_about_item)
			menu_item.select_actions.extend (agent on_about)
			help_menu.extend (menu_item)

		ensure
			help_menu_initialized: not help_menu.is_empty
		end

feature {NONE} -- ToolBar Implementation

	standard_toolbar: EV_TOOL_BAR
			-- Standard toolbar for this window.

	build_standard_toolbar
			-- Populate the standard toolbar.
		local
			toolbar_item: EV_TOOL_BAR_BUTTON
			toolbar_pixmap: EV_PIXMAP
		do
				-- Initialize the toolbar.
			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("new.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			standard_toolbar.extend (toolbar_item)

			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("open.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			standard_toolbar.extend (toolbar_item)

			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("save.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			standard_toolbar.extend (toolbar_item)
		ensure
			toolbar_initialized: not standard_toolbar.is_empty
		end

feature {NONE} -- StatusBar Implementation

	standard_status_bar: EV_STATUS_BAR
			-- Standard status bar for this window

	standard_status_label: EV_LABEL
			-- Label situated in the standard status bar.
			--
			-- Note: Call `standard_status_label.set_text (...)' to change the text
			--       displayed in the status bar.

	build_standard_status_bar
			-- Populate the standard toolbar.
		do
				-- Initialize the status bar.
			standard_status_bar.set_border_width (2)

				-- Populate the status bar.
			standard_status_label.align_text_left
			standard_status_label.set_text ("Ready ...")
			standard_status_bar.extend (standard_status_label)
		end

feature {NONE} -- About Dialog Implementation

	on_about
			-- Display the About dialog.
		local
			about_dialog: ABOUT_DIALOG
		do
			create about_dialog
			about_dialog.show_modal_to_window (Current)
		end

feature {NONE} -- Task dialog implementation

	on_task_dialog
			-- Display th task dialog
		local
			task_dialog: TASK_DIALOG
		do
			create task_dialog
			task_dialog.show_modal_to_window (Current)
		end

feature {NONE} -- Implementation, Close event, Connect event, Disconnect event

	request_close_window
			-- Process user request to close the window.
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button ~ (create {EV_DIALOG_CONSTANTS}).ev_ok then
					-- Destroy the window.
				destroy

					-- End the application.
					--| TODO: Remove next instruction if you don't want the application
					--|       to end when the first window is closed..
				if attached (create {EV_ENVIRONMENT}).application as a then
					a.destroy
				end
			end
		end

	ip:               ARRAY[NATURAL_8]
	server_host_name: STRING
	server_address:   INET4_ADDRESS
	client_sock:      NETWORK_STREAM_SOCKET

	request_connect
			-- Process user request to connect to server
		do
			create ip.make_filled (0, 1, 4)
			ip.put (127, 1)
			ip.put (0,   2)
			ip.put (0,   3)
			ip.put (1,   4)
			create server_host_name.make_empty
			server_host_name := "localhost"
			create server_address.make_from_host_and_address (server_host_name, ip)
			create client_sock.make_client_by_address_and_port (server_address, 6251)

			client_sock.connect

		end

	request_disconnect
			-- Process user request to disconnect from server
		do
			if client_sock.is_connected then
				client_sock.cleanup
			end
		end

	send_message
			--
		do
			if (client_sock.is_connected ) then

				client_sock.independent_store (msg)

			else
				io.put_string ("Unable to connect to: " + server_host_name)
				io.put_new_line
			end
		end

feature {NONE} -- Implementation Create database event, Run script event

	request_create_db
			--
		do

		end

	request_run_script
			--
		do

		end


feature {NONE} -- Implementation

	db:              DATABASE_APPL[MYSQL]
	session_control: DB_CONTROL
	modification:    DB_CHANGE

	main_container: EV_VERTICAL_BOX
			-- Main container (contains all widgets displayed in this window).

	build_main_container
			-- Populate `main_container'.
		do
			main_container.extend (create {EV_TEXT})
		ensure
			main_container_created: main_container /= Void
		end

	load_servers
			-- Loads configured servers from schedulerds/servers
		do

		end

feature {NONE} -- Implementation / Constants

	Window_title: STRING = "eScheduler client"
			-- Title of the window.

	Window_width: INTEGER = 600
			-- Initial width for this window.

	Window_height: INTEGER = 400
			-- Initial height for this window.


	msg: MESSAGE

end
